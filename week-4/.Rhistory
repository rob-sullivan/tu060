#research question:
# do cars with big engines use more fuel than cars with small engines?
# What does the relationship between engine size and fuel efficiency look like?
?mgp
#research question:
# do cars with big engines use more fuel than cars with small engines?
# What does the relationship between engine size and fuel efficiency look like?
??mgp
#research question:
# do cars with big engines use more fuel than cars with small engines?
# What does the relationship between engine size and fuel efficiency look like?
ggplot2::mpg
?ggplot2::mpg
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy))
ggplot2(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy))
ggplot2:ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy))
#ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy))
install.packages("tidyverse")
library(tidyverse)
#research question:
# do cars with big engines use more fuel than cars with small engines?
# What does the relationship between engine size and fuel efficiency look like?
ggplot2::mpg #observations collected by the US Environment Protection Agency on 38 models of cars
?ggplot2::mpg #used ? to bring up help
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy))
install.packages("tidyverse")
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
#research question:
# do cars with big engines use more fuel than cars with small engines?
# What does the relationship between engine size and fuel efficiency look like?
ggplot2::mpg #observations collected by the US Environment Protection Agency on 38 models of cars
?ggplot2::mpg #used ? to bring up help
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg)
ggplot2::mtcars
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy))
install.packages("tidyverse")
library(tidyverse)
#research question:
# do cars with big engines use more fuel than cars with small engines?
# What does the relationship between engine size and fuel efficiency look like?
ggplot2::mpg #observations collected by the US Environment Protection Agency on 38 models of cars
?ggplot2::mpg #used ? to bring up help
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy))
---
title: "R Notebook"
output: html_notebook
---
plot(cars)
plot(cars)
# for increasing sample size and bucket count, create histogram
#---------------------
for (i in 1:5 ) {
j = 4 ^ i
# name file
png(file = paste("freq_hist_", i, ".png", sep=""))
hist(rnorm(n = j * 10, mean = 50, sd = 10), breaks = seq(0, 100, length = j + 1), main=paste("n=", j * 10, ", " , j, " bins"), xlab = "")
# save
dev.off()
}
# for the final histogram, create histograms both with frequencies and with densities
#---------------------
i = 6
j = 4 ^ i
final_data = rnorm(n = j * 10, mean = 50, sd = 10)
# name file
png(file = paste("freq_hist_", i, ".png", sep=""))
hist(final_data, breaks = seq(0, 100, length = j + 1), main=paste("n=", j * 10, ", " , j, " bins"), xlab = "")
dev.off()
# name file
png(file = paste("dens_hist_", i, ".png", sep=""))
hist(final_data, breaks = seq(0, 100, length = j + 1), main=paste("n=", j * 10, ", " , j, " bins"), xlab = "", freq = FALSE)
dev.off()
# plot normal distribution
#--------------------------------
x = seq(0, 100, length = j + 1)
normal_data = dnorm(x, mean = 50, sd = 10, log = FALSE)
png(file = "pdf_norm.png")
plot(x, normal_data, main=paste("Probability density function"), xlab = "", ylab = "Probability density")
dev.off()
for (i in 1:5 ) {
j = 4 ^ i
# name file
png(file = paste("freq_hist_", i, ".png", sep=""))
hist(rnorm(n = j * 10, mean = 50, sd = 10), breaks = seq(0, 100, length = j + 1), main=paste("n=", j * 10, ", " , j, " bins"), xlab = "")
# save
dev.off()
}
for (i in 1:5 ) {
j = 4 ^ i
# name file
png(file = paste("freq_hist_", i, ".png", sep=""))
hist(rnorm(n = j * 10, mean = 50, sd = 10), breaks = seq(0, 100, length = j + 1), main=paste("n=", j * 10, ", " , j, " bins"), xlab = "")
# save
dev.off()
}
for(i in 1:5){}
for(i in 1:5){
j = 4 ^ i
png(file = paste("freq_hist_", i, ".png", sep=""))
hist(rnorm(n = j * 10, mean = 50, sd = 10), breaks = seq(0, 100, length = j + 1), main=paste("n=", j * 10, ", " , j, " bins"), xlab = "")
dev.off()
}
# for the final histogram, create histograms both with frequencies and with densities
#---------------------
i = 6
# for increasing sample size and bucket count, create histogram
#---------------------
for (i in 1:5 ) {
j = 4 ^ i
# name file
png(file = paste("freq_hist_", i, ".png", sep=""))
hist(rnorm(n = j * 10, mean = 50, sd = 10), breaks = seq(0, 100, length = j + 1), main=paste("n=", j * 10, ", " , j, " bins"), xlab = "")
# save
dev.off()
}
# for the final histogram, create histograms both with frequencies and with densities
#---------------------
i = 6
j = 4 ^ i
final_data = rnorm(n = j * 10, mean = 50, sd = 10)
# name file
png(file = paste("freq_hist_", i, ".png", sep=""))
hist(final_data, breaks = seq(0, 100, length = j + 1), main=paste("n=", j * 10, ", " , j, " bins"), xlab = "")
dev.off()
# name file
png(file = paste("dens_hist_", i, ".png", sep=""))
hist(final_data, breaks = seq(0, 100, length = j + 1), main=paste("n=", j * 10, ", " , j, " bins"), xlab = "", freq = FALSE)
dev.off()
# plot normal distribution
#--------------------------------
x = seq(0, 100, length = j + 1)
normal_data = dnorm(x, mean = 50, sd = 10, log = FALSE)
png(file = "pdf_norm.png")
plot(x, normal_data, main=paste("Probability density function"), xlab = "", ylab = "Probability density")
dev.off()
clear
str(airquality)
Temperature <- airquality$Temp
hist(Temperature)
View(data)
gc()
for (i in 1:5 ) {
j = 4 ^ i
# name file
png(file = paste("freq_hist_", i, ".png", sep=""))
hist(rnorm(n = j * 10, mean = 50, sd = 10), breaks = seq(0, 100, length = j + 1), main=paste("n=", j * 10, ", " , j, " bins"), xlab = "")
# save
dev.off()
}
i = 6
j = 4 ^ i
final_data = rnorm(n = j * 10, mean = 50, sd = 10)
png(file = paste("freq_hist_", i, ".png", sep=""))
hist(final_data, breaks = seq(0, 100, length = j + 1), main=paste("n=", j * 10, ", " , j, " bins"), xlab = "")
png(file = paste("dens_hist_", i, ".png", sep=""))
hist(final_data, breaks = seq(0, 100, length = j + 1), main=paste("n=", j * 10, ", " , j, " bins"), xlab = "", freq = FALSE)
x = seq(0, 100, length = j + 1)
normal_data = dnorm(x, mean = 50, sd = 10, log = FALSE)
png(file = "pdf_norm.png")
plot(x, normal_data, main=paste("Probability density function"), xlab = "", ylab = "Probability density")
dev.off()
#load packages
#install packman for managing add-ons
install.packages("packman")
#load packages
#install pacman for managing add-ons
install.packages("pacman")
require(pacman) #gives confirmation message
#now use pacman to load other libraries
pacman::p_load(pacman, dplyr, GGally, ggplot2, ggthemes, ggvis, httr, lubridate, plotly, rio, rmarkdown, shiny, stringr, tidyr)
# to clean up
#to clear packages
#p_unload(dplyr, tidyr)
p_unload(all) #unloads all of pacman libraries
library(datasets) #base packages need to be loaded in like this
detach("package:datasets")
#clear the console
cat("\014")
#basic graphics
#default plot command ( or basic x and y graph)
#first we load in datasets
library(datasets)
head(iris)
#basic graphics
#default plot command ( or basic x and y graph)
#first we load in datasets
?library(datasets)
?datasets
?plot
plot(iris$Species)
plot(iris$Petal.Length)
plot(iris$Species) # categorical variable
plot(iris$Petal.Length) #quantitative variable
plot(iris$Species, iris$Petal.Width) #cat x quant
plot(iris$Petal.Length, iris$Petal.Width) #cat x quant
plot(iris)
#plot with options
plot(iris$Petal.Length, iris$Petal.Width,
col = "#cc0000",
pch = 19,
main = "Iris: Petal Length vs. Petal Width",
xlab = "Petal Length",
ylab = "Petal Width")
#plot formulas with plot()
plot(cos, 0, 2*pi)
plot(exp, 1, 5)
plot(dnorm, -3, +3)
#standard normal distribution
plot(dnorm, -3, +3,
col = "#cc0000",
lwd = 5,
main = "Standard Normal Distribution",
xlab = "z-scores",
ylab = "Density")
#first we load in datasets
library(datasets)
#bar charts
?mtcars
head(mtcars)
barplot(mtcars$cyl)
# for frequencies we need a summary table because it prints out for each row
cylinders <- table(mtcars$cyl)
cylinders <- table(mtcars$cyl)
plot(cylinders)
barplot(cylinders)
#histograms
#use for quant data. we want to see shape, gaps, outlier and symmetry
?iris
head(iris)
#histogram 4 quant variables
hist(iris$Sepal.Length)
hist(iris$Sepal.Width)
hist(iris$Petal.Length)
hist(iris$Petal.Width)
#to fix do his by group, in three rows and 1 column
par(mflow = c(3,1))
#to fix do his by group, in three rows and 1 column
par(mfrow = c(3,1))
##his for each species using options
hist(iris$Petal.Width [iris$Species == "setosa"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Setosa",
xlab = "",
col = "red")
hist(iris$Petal.Width [iris$Species == "versicolor"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Versicolor",
xlab = "",
col = "purple")
hist(iris$Petal.Width [iris$Species == "virginica"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Virginica",
xlab = "",
col = "blue")
#restore graphic parameter
par(mfrow=c(1,1))
head(iris)
#scatter plot
#used to compare association between two quantitative variables
#looking for linear, spread, outliers and correlation
?mtcars
#first check univariate distributions
hist(mtcars$wt)
hist(mtcars$mpg)
#now basic plot of two on x and y
plot(mtcars$wt, mtcars$mpg)
#now basic plot of two on x and y
plot(mtcars$wt, mtcars$mpg
col="blue"
)
##his for each species using options
hist(iris$Petal.Width [iris$Species == "setosa"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Setosa",
xlab = "",
col = "red")
#now basic plot of two on x and y
plot(mtcars$wt, mtcars$mpg
col="blue"
)
#now basic plot of two on x and y
plot(mtcars$wt, mtcars$mpg,
col="blue"
)
#now basic plot of two on x and y
plot(mtcars$wt, mtcars$mpg,
pch=19,
cex=1.5,
col="blue")
#now basic plot of two on x and y
plot(mtcars$wt, mtcars$mpg,
pch=19,
cex=1.5,
main="How much gas used by weight of car"
col="blue")
#now basic plot of two on x and y
plot(mtcars$wt, mtcars$mpg,
pch=19,
cex=1.5,
main="How much gas used by weight of car",
col="blue")
#now basic plot of two on x and y
plot(mtcars$wt, mtcars$mpg,
pch=19,
cex=1.5,
main="How much gas used by weight of car",
xlab = "Weight [k pounds]",
ylab = "Fuel [mpg]",
col="blue")
#overlay plots
?lynx
hist(iris$Petal.Width [iris$Species == "versicolor"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Versicolor",
xlab = "",
col = "purple")
head(lynx)
#create a histogram
hist(lynx)
hist(lynx,
breaks=14,
freq = False,
col = "thistle1",
main = "lynx trappings 1821-1934",
xlab = "# trapped")
hist(lynx,
breaks=14,
freq = FALSE,
col = "thistle1",
main = "lynx trappings 1821-1934",
xlab = "# trapped")
#normal distribution chart
curve(dnorm(x, mean = mean(lynx), sd=sd(lynx))
col="blue",
lwd = 2,
add = TRUE)
#normal distribution chart
curve(dnorm(x, mean = mean(lynx), sd=sd(lynx)),
col="blue",
lwd = 2,
add = TRUE)
#add two kernal density estimators
lines(denisty(lynx), col = "red", lwd =2)
#add two kernal density estimators
lines(density(lynx), col = "red", lwd =2)
lines(density(lynx, adjust = 3), col = "green", lwd =3)
#add rug lines
rug(lynx, lwd=2, col="black")
#summary
head(iris)
summary(iris$Species)
summary(iris$Length)
summary(iris$Sepal.Length)
summary(iris)
hist(iris)
his(iris)
his(iris)
hist(iris)
#describe
require(pacman)
pacman::p_load(pacman, dplyr, GGally, ggplot2, ggthemes, ggvis, httr, lubridate, plotly, rio, rmarkdown, shiny, stringr, tidyr)
describe(iris)
pacman::p_load(pacman, dplyr, GGally, ggplot2, ggthemes, ggvis, httr, lubridate, plotly, rio, rmarkdown, shiny, stringr, tidyr, psych)
#describe
library(pacman)
#now basic plot of two on x and y
plot(mtcars$wt, mtcars$mpg,
pch=19,
cex=1.5,
main="How much gas used by weight of car",
xlab = "Weight [k pounds]",
ylab = "Fuel [mpg]",
col="blue")
pacman::p_load(pacman, dplyr, GGally, ggplot2, ggthemes, ggvis, httr, lubridate, plotly, rio, rmarkdown, shiny, stringr, tidyr)
p_load(psych)
p_load(psych) #sudo apt-get install gfortran required
sum(3,6,8,NA)
numbers <- 1:11
numbers
print(numbers>5)
greater.than.5 <- numbers[numbers>5]
setwd("~/projects/tu060/week-4")
#students <- read_delim('./dataset.csv', delim=';', na=c('unknown'), col_types = 'nccccncccncnnnncc')
read.table("dataset.csv", sep = ",", header=TRUE)
str(iris)
#students <- read_delim('./dataset.csv', delim=';', na=c('unknown'), col_types = 'nccccncccncnnnncc')
student = read.table("dataset.csv", sep = ",", header=TRUE)
str(student)
#students <- read_delim('./dataset.csv', delim=';', na=c('unknown'), col_types = 'nccccncccncnnnncc')
student = read.table("dataset.csv", sep = ",", header=TRUE)
str(student)
#basic checks
problems(student)
#use readr library and read in csv file
library(readr)
#basic checks
problems(student)
nrow(student)
ncol(student)
head(student)
#head(student)
#we take a look at our data
str(student)
tail(student)
View(student)
# we take a look at our columns and their type in our dataset
str(student$sex)
str(student$Pstatus)
tail(student)
#check for na
for (i in ncol(student)){
print(is.na(student[[i]]))
}
#check for na
for (i in ncol(student)){
ifelse(is.na(student[[i]]),"found","all good")
}
#check for na
for (i in ncol(student)){
ifelse(is.na(student[[i]]),print("found"),print("all good"))
}
#check for na
for (i in ncol(student)){
ifelse(is.na(student[[i]]),print(student[[i]]),print("all good"))
}
#now we convert characters to factors
#with loops
factor_indices <- c(1:30, 34:50)
for (i in factor_indices){
student[[i]] <- as.factor(student[[i]])
}
str(student)
summary(student)
plot(student$sex)
plot(student)
print(student(1))
print(student[1])
print(student[[1])
names(student)
columns <- c(names(student))
print(student["sex"])
for (i in columns){
plot(student[[i]])
}
for (i in columns){
plot(student[i])
}
?plot
?plot()
columns <- c(names(student))
for (i in columns){
plot(student[i],xlab=i)
}
for (i in columns){
jpeg(file= c(i, ".jpeg"))
plot(student[i],xlab=i)
dev.off()
}
?hist()
hist(student[31],main = paste("Histogram of" , 31))
hist(student[51],main = paste("Histogram of" , 51))
numeric_indices <- c(31:33, 51:53)
for (i in numeric_indices){
student[[i]] <- as.numeric(student[[i]])
}
hist(student[31],main = paste("Histogram of" , 31))
#descriptive statistics
summary(student)
# we take a look at our columns and their type in our dataset
str(student)
#we check for any N/A or any issues with values by viewing top and bottom of dataset
head(student)
# we take a look at our columns and their type in our dataset
str(student)
hist(student[31],main = paste("Histogram of" , 31))
hist(student$mG1,main = paste("Histogram of" , "mG1"))
hist(student$mG1,main = paste("Histogram of" , "mG1"))
hist(student$mG2,main = paste("Histogram of" , "mG2"))
hist(student$mG3,main = paste("Histogram of" , "mG3"))
hist(student$pG1,main = paste("Histogram of" , "pG1"))
hist(student$pG2,main = paste("Histogram of" , "pG2"))
hist(student$pG3,main = paste("Histogram of" , "pG3"))
clear
summary(student)
hist(student$mG1,main = paste("Histogram of" , "mG1"), xlab="mG1", ylab="score")
#we check for any N/A or any issues with values by viewing top and bottom of dataset
head(student)
hist(student$mG1,main = paste("Histogram of" , "mG1"), xlab="mG1", ylab="score", col="darkmblue")
hist(student$mG1,main = paste("Histogram of" , "mG1"), xlab="mG1", ylab="score", col="darkblue")
hist(student$mG1,main = paste("Histogram of" , "mG1"), xlab="mG1", ylab="score", col="lightblue")
hist(student$pG1,main = paste("Histogram of" , "pG1"), xlab="pG1", ylab="score", col="lightmagenta")
hist(student$pG1,main = paste("Histogram of" , "pG1"), xlab="pG1", ylab="score", col="lightred")
hist(student$pG1,main = paste("Histogram of" , "pG1"), xlab="pG1", ylab="score", col="lightred")
hist(student$pG1,main = paste("Histogram of" , "pG1"), xlab="pG1", ylab="score", col="lightgreen")
text(mG1$mids,mG1$counts,labels=mG1$counts, adj=c(0.5, -0.5))
mG1 = hist(student$mG1,main = paste("Histogram of" , "mG1"), xlab="mG1", ylab="score", col="lightblue")
text(mG1$mids,mG1$counts,labels=mG1$counts, adj=c(0.5, -0.5))
mG1 = hist(student$mG1,main = paste("Histogram of" , "mG1"), xlab="mG1", ylab="score", col="lightblue",breaks=20)
text(mG1$mids,mG1$counts,labels=mG1$counts, adj=c(0.5, -0.5))
mG1 = hist(student$mG1,main = paste("Histogram of" , "mG1"), xlab="mG1", ylab="score", col="lightblue",breaks=14)
mG1 = hist(student$mG1,main = paste("Histogram of" , "mG1"), xlab="mG1", ylab="score", col="lightblue",breaks=10)
20
mG1 = hist(student$mG1,main = paste("Histogram of" , "mG1"), xlab="mG1", ylab="score", col="lightblue",breaks=20)
mG1 = hist(student$mG1,main = paste("Histogram of" , "mG1"), xlab="mG1", ylab="score", col="lightblue")
